package main


import (
    "fmt"
    "log"
    "net/http"
    "strconv"
)

// home handler
func home(w http.ResponseWriter, r *http.Request){
    // check if current req mathches '/'. if not use http.NotFound() to send 404

    if r.URL.Path != "/" {
        http.NotFound(w, r)
        return
    }
    w.Write([]byte("Hello from Snippetbox"))

}

func snippetView(w http.ResponseWriter, r *http.Request){
    // extract value of id param from query string & convert it to integer
    id, err := strconv.Atoi(r.URL.Query().Get("id"))
    if err != nil || id < 1{
        http.NotFound(w, r)
        return
    }
    fmt.Fprintf(w, "Display a specific snippet with ID %d...", id)
    w.Write([]byte("Displya a specific snippet"))
}

// snippet create handler func
func snippetCreate(w http.ResponseWriter, r *http.Request){
    
    /*if r.Method !=  "POST" {
        // add a mehod to the header
        w.Header().Set("Allow", "POST")
        // w.WriteHeader(405)
        // w.Write([]byte("Method Not Allowed"))
        http.Error(w, "Method Not Allowed", 405)
        return
    }*/
    // using net//http constants
    if r.Method != http.MethodPost{
        w.Header().Set("Allow", http.MethodPost)
        w.Header().Set("Content-Type", "application/json")

        // suppress system generated headers
        w.Header()["Date"] = nil // Del() -> w.Header().Del("Content-Type") does not remove syste,m generated headers - instead we suppress the,
        http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
        return
    }
    w.Write([]byte("Create a snippet..."))
    w.Write([]byte(`{"book": "Go further"}`))
}

func main(){
    // initilize server mux and register home root handler
    mux := http.NewServeMux()
    // Go 1.22 [METHOD][HOST]/[PATH] i.e ..("GET /snippet/view", snippetView) 
    mux.HandleFunc("/", home)
    mux.HandleFunc("/snippet/view", snippetView)
    mux.HandleFunc("/snippet/create", snippetCreate)

    // start new web server using http.ListenAndServe() function
    log.Print("Starting server on :4000")
    err := http.ListenAndServe(":4000", mux)
    if err != nil {
        log.Fatal(err)
    }
}
